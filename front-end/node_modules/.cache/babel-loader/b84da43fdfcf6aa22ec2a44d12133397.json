{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ashsi\\\\Desktop\\\\react app\\\\my-app\\\\src\\\\Components\\\\DataRequests\\\\Tesco.jsx\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\"; // the import for axios so we can do requests\n\nimport { useEffect, useState } from \"react\";\nimport Employee from \"./Employee\"; //will retrieve the data\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Tesco = () => {\n  _s();\n\n  //state to store the data somewhere in case it changes\n  const [data, setData] = useState([]); // const getData = () => {\n  //     //get request to get the URL from\n  //     axios.get(\"https://reqres.in/api/users\")\n  //         //.then -> once the data is received, do something\n  //         .then((response) => {\n  //             //use the setData to update the empty array\n  //             setData(response.data.data)\n  //             //the do something is to log the response to the console\n  //             console.log(response.data.data);\n  //             //in case things don't go according to plan, need too catch the error and deal with it\n  //         }).catch((error) => {\n  //             console.error(error);\n  //         })\n  // }\n\n  useEffect(() => {\n    //get request to get the URL from\n    axios.get(\"https://reqres.in/api/\") //.then -> once the data is received, do something\n    .then(response => {\n      //use the setData to update the empty array\n      setData(response.data.data); //the do something is to log the response to the console\n\n      console.log(response.data.data); //in case things don't go according to plan, need too catch the error and deal with it\n    }).catch(error => {\n      console.error(error);\n    });\n  }, []); //square brackets means run it once\n  //need to call the function in order to run it\n  // getData();//this line causes the error of an infinite loop so use a useEffect\n\n  console.log(data);\n  return (\n    /*#__PURE__*/\n    //<> -> a fragment, can use <div> instead\n    _jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Welcome to Tesco\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"first name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"last name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: //to display the data on the page, we need to map over it\n          data.map(emp => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(Employee, {\n              person: emp\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true)\n  );\n};\n\n_s(Tesco, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n\n_c = Tesco;\nexport default Tesco;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tesco\");","map":{"version":3,"sources":["C:/Users/ashsi/Desktop/react app/my-app/src/Components/DataRequests/Tesco.jsx"],"names":["axios","useEffect","useState","Employee","Tesco","data","setData","get","then","response","console","log","catch","error","map","emp"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAA0B;;AAC1B,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,QAAP,MAAqB,YAArB,C,CAGA;;;;;AACA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAEhB;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,EAAD,CAAhC,CAHgB,CAKhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ;AACAD,IAAAA,KAAK,CAACO,GAAN,CAAU,wBAAV,EACI;AADJ,KAEKC,IAFL,CAEWC,QAAD,IAAc;AAChB;AACAH,MAAAA,OAAO,CAACG,QAAQ,CAACJ,IAAT,CAAcA,IAAf,CAAP,CAFgB,CAGhB;;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACJ,IAAT,CAAcA,IAA1B,EAJgB,CAKhB;AACH,KARL,EAQOO,KARP,CAQcC,KAAD,IAAW;AAChBH,MAAAA,OAAO,CAACG,KAAR,CAAcA,KAAd;AACH,KAVL;AAWH,GAbQ,EAaN,EAbM,CAAT,CApBgB,CAiCV;AAEN;AACA;;AACAH,EAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;AAEA;AAAA;AACI;AACA;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,gCACI;AAAA,iCACI;AAAA,oCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJJ,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBADJ,eAUI;AAAA,oBAEQ;AACAA,UAAAA,IAAI,CAACS,GAAL,CAAUC,GAAD,iBACL;AAAA,mCACI,QAAC,QAAD;AAAU,cAAA,MAAM,EAAEA;AAAlB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBADJ;AAHR;AAAA;AAAA;AAAA;AAAA,gBAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAFJ;AA4BH,CAnED;;GAAMX,K;;KAAAA,K;AAoEN,eAAeA,KAAf","sourcesContent":["import axios from \"axios\";// the import for axios so we can do requests\r\nimport { useEffect, useState } from \"react\";\r\nimport Employee from \"./Employee\";\r\n\r\n\r\n//will retrieve the data\r\nconst Tesco = () => {\r\n\r\n    //state to store the data somewhere in case it changes\r\n    const [data, setData] = useState([])\r\n\r\n    // const getData = () => {\r\n    //     //get request to get the URL from\r\n    //     axios.get(\"https://reqres.in/api/users\")\r\n    //         //.then -> once the data is received, do something\r\n    //         .then((response) => {\r\n    //             //use the setData to update the empty array\r\n    //             setData(response.data.data)\r\n    //             //the do something is to log the response to the console\r\n    //             console.log(response.data.data);\r\n    //             //in case things don't go according to plan, need too catch the error and deal with it\r\n    //         }).catch((error) => {\r\n    //             console.error(error);\r\n    //         })\r\n    // }\r\n\r\n    useEffect(() => {\r\n        //get request to get the URL from\r\n        axios.get(\"https://reqres.in/api/\")\r\n            //.then -> once the data is received, do something\r\n            .then((response) => {\r\n                //use the setData to update the empty array\r\n                setData(response.data.data)\r\n                //the do something is to log the response to the console\r\n                console.log(response.data.data);\r\n                //in case things don't go according to plan, need too catch the error and deal with it\r\n            }).catch((error) => {\r\n                console.error(error);\r\n            })\r\n    }, [])//square brackets means run it once\r\n\r\n    //need to call the function in order to run it\r\n    // getData();//this line causes the error of an infinite loop so use a useEffect\r\n    console.log(data);\r\n\r\n    return (\r\n        //<> -> a fragment, can use <div> instead\r\n        <>\r\n            <h1>Welcome to Tesco</h1>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>ID</th>\r\n                        <th>email</th>\r\n                        <th>first name</th>\r\n                        <th>last name</th>\r\n                        <th>Image</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        //to display the data on the page, we need to map over it\r\n                        data.map((emp) => (\r\n                            <tr>\r\n                                <Employee person={emp} />\r\n                            </tr>\r\n                        ))}\r\n\r\n                </tbody>\r\n            </table>\r\n        </>\r\n    )\r\n\r\n}\r\nexport default Tesco;"]},"metadata":{},"sourceType":"module"}